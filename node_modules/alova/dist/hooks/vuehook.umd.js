/**
  * alova 2.2.0 (https://alova.js.org)
  * Document https://alova.js.org
  * Copyright 2023 JOU-amjs. All Rights Reserved
  * Licensed under MIT (https://httpshub.com/alovajs/alova/blob/main/LICENSE)
  */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vue')) :
  typeof define === 'function' && define.amd ? define(['vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.VueHook = factory(global.Vue));
})(this, (function (vue) { 'use strict';

  // 以下为减少编译代码量而添加的统一处理函数或变量
  const ObjectCls = Object, undefinedValue = undefined, trueValue = true, setTimeoutFn = (fn, delay = 0) => setTimeout(fn, delay), clearTimeoutTimer = (timer) => clearTimeout(timer), objectKeys = (obj) => ObjectCls.keys(obj), forEach = (ary, fn) => ary.forEach(fn);

  // Vue的预定义hooks
  var VueHook = {
      create: (data) => vue.ref(data),
      export: (state) => state,
      dehydrate: (state) => state.value,
      update: (newVal, states) => forEach(objectKeys(newVal), key => {
          states[key].value = newVal[key];
      }),
      effectRequest({ handler, removeStates, immediate, watchingStates }) {
          // 组件卸载时移除对应状态
          vue.onUnmounted(removeStates);
          immediate && handler();
          let timer;
          forEach(watchingStates || [], (state, i) => {
              vue.watch(state, () => {
                  timer && clearTimeoutTimer(timer);
                  timer = setTimeoutFn(() => {
                      handler(i);
                      timer = undefinedValue;
                  });
              }, { deep: trueValue });
          });
      }
  };

  return VueHook;

}));
